#include <bits/stdc++.h>
using namespace std;
#define lli long long int
#define f first
#define s second
#define pb push_back
#define MAXN 100001
#define INF 10000000000000
#define mod 1000000007
#define loop(i, a,b) for  (int i=(a); i<= (signed)(b); i++)
#define lp(i,a) for(int i = 0;i<(signed)(a); i++)
lli n, m;
struct stuff{
    int spice, left, right;lli flavor;
};
multiset<pair<int,int>> pt;
stuff a[MAXN];
int lupdate(int pos, lli &fsum)
{
    int orig = pos;
    while(pos - 1 >=0 && a[pos - 1].spice <= a[orig].spice ){ ///add case when they hit a "block"
        pos--;
        fsum+= a[pos].flavor;
        pos = a[pos].left;
    }
    return pos;
}
int rupdate(int pos, lli &fsum)
{
    int orig = pos;
    while(pos +1 < n && a[pos+1].spice <= a[orig].spice){
        pos++;
        fsum+= a[pos].flavor;
        pos = a[pos].right;
    }
    return pos;
}
int main() {
    freopen("hayfeast.in","r",stdin);
    freopen("hayfeast.out","w",stdout);
    cin>>n>>m;
    for(int i = 0;i<n;i++){
        int s, f;
        cin>>f>>s;
        pt.insert({s, i});
        a[i] = {s, i, i, f};
    }
    for(auto it: pt){
        int loc = it.s;
        lli fsum = a[loc].flavor; ///be careful not to add twice in middle
        int mxleft=lupdate(loc, fsum);
        int mxright = rupdate(loc, fsum);
        a[mxright] = a[mxleft] = {it.f, mxleft, mxright, fsum};
        if(fsum>= m){
            cout<<it.f;
            return 0;
        }
    }
}
