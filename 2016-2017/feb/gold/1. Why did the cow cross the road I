#include <bits/stdc++.h>
using namespace std;
#define lli long long int
#define f first
#define s second
#define pb push_back
#define MAXN 101
#define INF 10000000000000
#define mod 1000000007
#define loop(i, a,b) for  (int i=(a); i<= (signed)(b); i++)
#define lp(i,a) for(int i = 0;i<(signed)(a); i++)
int n,t;
///all the possible locations after going 3 moves
///this is better than finding the location after 1 or 2 moves
int dy[] = {0, 1, 2, 3, 2, 1, 0, -1, -2, -3, -2, -1, -1, 1, 0, 0};
int dx[] = {3, 2, 1, 0, -1, -2, -3, -2, -1, 0, 1, 2, 0, 0, -1, 1};
int main() {
    freopen("visitfj.in", "r",stdin);
    freopen("visitfj.out","w",stdout);
    cin>>n>>t;
    vector<vector<int>> a(n, vector<int>(n));
    ///create gri
    lp(i, n)
    {
        lp(j, n){
            cin>>a[i][j];
        }
    }
    ///create dp
    vector<vector<int>> dp(n, vector<int> (n, 0x7fffffff));
    dp[0][0] = 0;
    priority_queue<pair<int,int>> q;
    q.push({0,0});
    int ans = 0x7fffffff;
    ///create dijkstras
    while(!q.empty()){
        ///pro move here is to make second ny*n  +nx, so it represents two values with one number
        int dmin = - q.top().first;
        int y = q.top().second/n;
        int x=  q.top().second%n;
        q.pop();
        ///if doesnt minimize, continue
        if(dmin != dp[y][x])continue;
        ///if less, then go directly there and add travel distance
        int dist = abs(n -1- y) + abs(n - 1-  x);
        if(dist<=2) ans = min(ans, dmin + dist *t);
        ///loop through end locations after 3 steps
        for(int i  =0; i<sizeof(dy)/sizeof(int); i++){
            int ny = dy[i] + y;
            int nx = dx[i]  +x;
            if(nx<0 || ny<0 || nx>=n || ny>=n || dp[ny][nx]< dmin  +a[ny][nx]  +3*t)continue;
            ///add point to the end
            dp[ny][nx] = dmin + a[ny][nx] + 3*t;
            q.push({-dp[ny][nx], ny*n + nx});
        }
    }
    cout<<ans<<endl;
}
