#include <bits/stdc++.h>
using namespace std;
#define lli long long int
#define f first
#define s second
#define pb push_back
#define MAXN 21
#define MAXVAL 1000000001
#define INF 2000000000
#define mod 1000000007
#define loop(i, a,b) for  (int i=(a); i<= (signed)(b); i++)
#define lp(i,a) for(int i = 0;i<(signed)(a); i++)
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
#define ordered_set tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update>=
int n, k;
int dist(int x, int y, int x2, int y2)
{
    return (x-x2) * (x- x2)  + (y - y2)*(y-y2);
}
struct unionfind{
    vector<int> e;
    void init(int n) { e = vector<int> (n, -1); }
    int get(int x) { return e[x] <0? x :e[x] = get(e[x]);}
    bool sameset(int x, int y){return get(x) == get(y);}
    int size(int x) {return -e[get(x)];}
    bool combine(int x, int y){
        x = get(x);
        y = get(y);
        if(x==y) return false;
        if(e[x]  >e[y])swap(x,y);
        e[x]+= e[y];
        e[y] = x;
        return true;
    }
};
int main() {
    freopen("moocast.in","r",stdin);
    freopen("moocast.out","w",stdout);
    cin>>n;
    vector<pair<int,int>> pt;
    lp(i,n){
        int x, y;
        cin>>x>>y;
        pt.pb({x,y});
    }
    int ans = 0;
    unionfind d;
    d.init(n);
    vector <pair<int, pair<int,int>>> edges;
    lp(i,n){
        loop(j, i+1, n-1){
            int distance = dist(pt[i].f, pt[i].s, pt[j].f, pt[j].s);
            edges.pb({distance, {i, j}});
        }
    }
    sort(edges.begin(), edges.end());
    int lweight = 0;
    int numcomponent = n;
    for(auto v: edges){
        if(!d.sameset(v.s.f, v.s.s)){
            d.combine(v.s.f, v.s.s);
            lweight = v.f;
            if(--numcomponent ==1) break;
        }
    }
    cout<<lweight<<endl;
}
