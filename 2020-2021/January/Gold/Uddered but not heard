#include <bits/stdc++.h>
using namespace std;
#define lli long long int
#define f first
#define s second
#define pb push_back
#define MAXN 100001
#define INF 2000000000
#define mod 1000000007
#define loop(i, a,b) for  (int i=(a); i<= (signed)(b); i++)
#define lp(i,a) for(int i = 0;i<(signed)(a); i++)

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;

#define ordered_set tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update>
typedef vector<int> vi;
typedef pair<int,int> pii;
typedef vector<pair<int,int>> vpii;
string s;
int adj[26][26] ={0};
int main() {
  string s;
  cin>>s;
  map<char, int> index;
  ///have map map each letter to a unique value;
  lp(i, s.length()){
    if(index.find(s[i]) == index.end()){
        index.insert({s[i], index.size()});
    }
  }
  int n =index.size();
  ///find number of occurences of pairs of letters x and y
  for(int j  =1; j<s.length();j++){
    adj[index.find(s[j-1])->second][index.find(s[j])->second]++;
  }
  ///dp of states
  vi dp(1<<n, INF);
  dp[0] = 1;
  for(int mask =1; mask<(1<<n); mask++){
    dp[mask] = s.length();
    lp(j, n){
        if((mask&(1<<j))!=0){   ///if jth letter is represented in the mask
           int sum = dp[mask^(1<<j)];///sum is previous dp without that value
           cout<<mask<< "  "<<(mask^(1<<j))<< "  "<<(mask&!(1<<j))<<endl;
           lp(k, n){
            if((mask&(1<<k))!= 0) sum+=adj[j][k];   ///if other value is in, we will imagine j  being in front 
           }
           dp[mask] = min(dp[mask], sum);
        }
    }
  }
  cout<<dp[(1<<n)-1];
}
